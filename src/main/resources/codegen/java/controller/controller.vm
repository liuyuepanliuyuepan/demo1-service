package ${basePackage}.module.${table.moduleName}.controller.${sceneEnum.basePackage}.${table.businessName};

import static ${basePackage}.framework.common.pojo.CommonResult.success;

import ${basePackage}.framework.base.core.pojo.KlmbPage;
import ${basePackage}.framework.base.core.pojo.UpdateStatusReqVO;
import ${basePackage}.framework.common.pojo.CommonResult;
import ${basePackage}.module.${table.moduleName}.controller.${sceneEnum.basePackage}.${table.businessName}.vo.*;
import ${basePackage}.module.${table.moduleName}.convert.${table.businessName}.${table.className}Convert;
import ${basePackage}.module.${table.moduleName}.dto.${table.businessName}.${table.className}QueryDTO;
import ${basePackage}.module.${table.moduleName}.entity.${table.businessName}.${table.className}DO;
import ${basePackage}.module.${table.moduleName}.service.${table.businessName}.${table.className}Service;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import java.util.Collections;
import javax.validation.Valid;
#if ($sceneEnum.scene == 1)import org.springframework.security.access.prepost.PreAuthorize;#end
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;


/**
 * ${table.classComment} Controller
 *
 * @author ${table.author}
 */
@Api(tags = "xxx. ${table.classComment}")
@RestController
@RequestMapping("/${table.moduleName}/${simpleClassName_strikeCase}")
@Validated
public class ${sceneEnum.prefixClass}${table.className}Controller {

    private final ${table.className}Service ${classNameVar}Service;

    public ${table.className}Controller(${table.className}Service ${classNameVar}Service) {
        this.${classNameVar}Service = ${classNameVar}Service;
    }

    @PostMapping(value = "/save")
    @ApiOperation(value = "新增")
    #if ($sceneEnum.scene == 1)
    @PreAuthorize("@ss.hasPermission('${permissionPrefix}:save')")
    #end
    public CommonResult<String> save(@Valid @RequestBody ${table.className}SaveReqVO saveReqVO) {
        ${table.className}DO saveDO = ${table.className}Convert.INSTANCE.convert(saveReqVO);
        String bizId = "";
        if (${classNameVar}Service.saveDO(saveDO)) {
            bizId = saveDO.getBizId();
        }
        return success(bizId);
    }

    @DeleteMapping(value = "/delete/{bizId}")
    @ApiOperation(value = "删除")
    @ApiImplicitParams({
    @ApiImplicitParam(name = "bizId", value = "主键", dataTypeClass = String.class, paramType = "path")})
    #if ($sceneEnum.scene == 1)
    @PreAuthorize("@ss.hasPermission('${permissionPrefix}:delete')")
    #end
    public CommonResult<Boolean> deleteByBizId(@PathVariable String bizId) {
        ${classNameVar}Service.removeByBizIds(Collections.singletonList(bizId));
        return success(true);
    }

    @PutMapping(value = "/update")
    @ApiOperation(value = "更新")
    #if ($sceneEnum.scene == 1)
    @PreAuthorize("@ss.hasPermission('${permissionPrefix}:update')")
    #end
    public CommonResult<Boolean> update(@Valid @RequestBody ${table.className}UpdateReqVO updateReqVO) {
        ${table.className}DO updateDO = ${table.className}Convert.INSTANCE.convert(updateReqVO);
        ${classNameVar}Service.updateDO(updateDO);
        return success(true);
    }

    @PutMapping("/update-status")
    @ApiOperation("修改状态")
    #if ($sceneEnum.scene == 1)
    @PreAuthorize("@ss.hasPermission('${permissionPrefix}:update')")
    #end
    public CommonResult<Boolean> updateStatus(@Valid @RequestBody UpdateStatusReqVO reqVO) {
        ${classNameVar}Service.updateStatus(reqVO.getBizId(), reqVO.getStatus());
        return success(true);
    }

    @GetMapping(value = "/detail/{bizId}")
    @ApiOperation(value = "详情")
    @ApiImplicitParams({
    @ApiImplicitParam(name = "bizId", value = "业务id", dataTypeClass = String.class, paramType = "path")})
    #if ($sceneEnum.scene == 1)
    @PreAuthorize("@ss.hasPermission('${permissionPrefix}:query')")
    #end
    public CommonResult<${table.className}RespVO> getByBizId(@PathVariable String bizId) {
        ${table.className}DO saveDO = ${classNameVar}Service.getByBizId(bizId);
        return success(${table.className}Convert.INSTANCE.convert(saveDO));
    }

    @GetMapping({"/page"})
    @ApiOperation(value = "分页查询")
    #if ($sceneEnum.scene == 1)
    @PreAuthorize("@ss.hasPermission('${permissionPrefix}:query')")
    #end
    public CommonResult<KlmbPage<${table.className}RespVO>> page(@Valid ${table.className}PageReqVO reqVO) {
        KlmbPage<${table.className}DO> klmbPage = KlmbPage.<${table.className}DO>builder()
              .pageNo(reqVO.getPageNo())
              .pageSize(reqVO.getPageSize())
              .build();
        ${table.className}QueryDTO queryDTO = ${table.className}Convert.INSTANCE.convert(reqVO);
        KlmbPage<${table.className}DO> page = ${classNameVar}Service.page(queryDTO, klmbPage);
        return success(${table.className}Convert.INSTANCE.convert(page));
    }

}
